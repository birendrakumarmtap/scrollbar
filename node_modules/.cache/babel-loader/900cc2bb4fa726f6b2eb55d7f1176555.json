{"ast":null,"code":"var _jsxFileName = \"/home/birendra/myapp/src/Scrollbar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Scrollbar = props => {\n  _s();\n\n  const [list, setList] = useState([]);\n  const [listf, setListf] = useState([]);\n  const [offset, setOffset] = useState(10);\n  const [offseti, setOffseti] = useState(0);\n  document.addEventListener('onPagend', function () {\n    setOffset(offset + 10);\n    const arr = list.slice(0, offset);\n    setListf([...arr]);\n  });\n  useEffect(() => {\n    (function (doc) {\n      window.onscroll = function (event) {\n        if (isEndOfElement(doc.body)) {\n          sendNewEvent('onPagend');\n        }\n      };\n\n      function isEndOfElement(element) {\n        //visible height + pixel scrolled = total height \n        console.log(element.clientHeight, element.scrollTop, element.scrollHeight);\n        return element.clientHeight + element.scrollTop - element.scrollHeight < 5;\n      }\n\n      function sendNewEvent(eventName) {\n        var event = doc.createEvent('Event');\n        event.initEvent(eventName, true, true);\n        doc.dispatchEvent(event);\n      }\n    })(document);\n\n    fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json()).then(result => {\n      const arrf = result.map(item => {\n        return item.title;\n      });\n      setList([...arrf]);\n      setListf([...arrf.slice(0, offset)]);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" scrollbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: listf.map((item, idx) => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, Math.random(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, Math.random(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, Math.random(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item\n              }, Math.random(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Scrollbar, \"FgGwm8GCd8FFHFImBKU+2tkx5pw=\");\n\n_c = Scrollbar;\nexport default Scrollbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scrollbar\");","map":{"version":3,"sources":["/home/birendra/myapp/src/Scrollbar.js"],"names":["React","useEffect","useState","Scrollbar","props","list","setList","listf","setListf","offset","setOffset","offseti","setOffseti","document","addEventListener","arr","slice","doc","window","onscroll","event","isEndOfElement","body","sendNewEvent","element","console","log","clientHeight","scrollTop","scrollHeight","eventName","createEvent","initEvent","dispatchEvent","fetch","then","res","json","result","arrf","map","item","title","idx","Math","random"],"mappings":"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","sourcesContent":["import  React ,{ useEffect, useState } from 'react';\n\nconst Scrollbar = (props) => {\n\n    const [list, setList] = useState([]);\n    const [listf, setListf] = useState([]);\n    const [offset, setOffset] = useState(10);\n    const [offseti, setOffseti] = useState(0)\n\n    document.addEventListener('onPagend', function () {\n\n        setOffset(offset + 10);\n\n        const arr = list.slice(0, offset);\n        setListf([...arr]);\n\n    });\n\n\n\n\n    useEffect(() => {\n\n       (function (doc) {\n\n            window.onscroll = function (event) {\n                if (isEndOfElement(doc.body)) {\n                    sendNewEvent('onPagend');\n                }\n            };\n\n            function isEndOfElement(element) {\n                //visible height + pixel scrolled = total height \n                console.log(element.clientHeight, element.scrollTop, element.scrollHeight);\n                return (element.clientHeight + element.scrollTop - element.scrollHeight) < 5\n            }\n\n            function sendNewEvent(eventName) {\n                var event = doc.createEvent('Event');\n                event.initEvent(eventName, true, true);\n                doc.dispatchEvent(event);\n            }\n        }(document));\n\n\n\n\n\n\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then((res) => res.json())\n            .then((result) => {\n                const arrf = result.map((item) => {\n                    return item.title;\n                })\n                setList([...arrf]);\n                setListf([...arrf.slice(0, offset)])\n\n            })\n    }, []);\n\n\n\n    return (\n        <>\n            <h1> scrollbar</h1>\n            <table >\n                <tbody>\n                    {\n                        listf.map((item, idx) => {\n                            return (\n                                <>\n                                    <br key={Math.random()} />\n                                    <br key={Math.random()} />\n                                    <tr key={idx} key={idx}>\n                                        <td key={Math.random()}>{idx + 1}</td>\n                                        <td key={Math.random()}>{item}</td>\n                                    </tr>\n                                </>\n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nexport default Scrollbar;"]},"metadata":{},"sourceType":"module"}