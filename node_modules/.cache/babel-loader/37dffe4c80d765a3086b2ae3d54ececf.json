{"ast":null,"code":"var _jsxFileName = \"/home/birendra/myapp/src/Renderlist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Renderlist = props => {\n  _s();\n\n  const [list, setList] = useState([]);\n  const [listf, setListf] = useState([]);\n  const [offset, setOffset] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [message, setMessage] = useState(\"\");\n  const [status, setStatus] = useState('');\n\n  const getNextSetOfData = () => {\n    setOffset(offset + 10);\n    fetch(`http://localhost:3005/getfake?limit=${limit}&offset=${offset}`).then(res => {\n      if (res.status === 200) {\n        setStatus('success');\n        res.json().then(result => {\n          const arrf = result.map(item => {\n            return item.title;\n          }); //console.log(arrf);\n\n          setList([...list, ...arrf]);\n        });\n      } else {\n        setStatus('failed');\n        res.json().then(result => {\n          setMessage(result.message);\n        });\n      }\n    });\n  };\n\n  window.onscroll = function () {\n    var totalPageHeight = document.body.scrollHeight;\n    var scrollPoint = window.scrollY + window.innerHeight;\n\n    if (scrollPoint === totalPageHeight) {\n      console.log(\"at the bottom\");\n      getNextSetOfData();\n    }\n  }; // window.onscroll = function () {\n  //     // console.log( window.innerHeight , window.scrollY, document.body.offsetHeight)\n  //     // if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n  //   //  if ((document.body.offsetHeight - window.innerHeight) <= window.scrollY) {\n  //     if ((window.innerHeight + document.documentElement.scrollTop) >= document.body.offsetHeight) {\n  //         getNextSetOfData();\n  //     }\n  // };\n\n\n  useEffect(() => {\n    // getNextSetOfData();\n    console.log('hello');\n    fetch(`http://localhost:3005/getfake?limit=${limit}&offset=${offset}`).then(res => {\n      if (res.status === 200) {\n        setStatus('success');\n        console.log('hello');\n        res.json().then(result => {\n          const arrf = result.map(item => {\n            return item.title;\n          });\n          console.log(arrf);\n          setList([...list, ...arrf]);\n        });\n      } else {\n        setStatus('failed');\n        res.json().then(result => {\n          setMessage(result.message);\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"hi\", {\n      children: \"RenderList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: list.map((item, idx) => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, Math.random(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item\n              }, Math.random(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 41\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), status === 'failed' ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Renderlist, \"7/ev4EOn2l6E55WO+ki1pjb2O44=\");\n\n_c = Renderlist;\nexport default Renderlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Renderlist\");","map":{"version":3,"sources":["/home/birendra/myapp/src/Renderlist.js"],"names":["React","useState","useEffect","Renderlist","props","list","setList","listf","setListf","offset","setOffset","limit","setLimit","message","setMessage","status","setStatus","getNextSetOfData","fetch","then","res","json","result","arrf","map","item","title","window","onscroll","totalPageHeight","document","body","scrollHeight","scrollPoint","scrollY","innerHeight","console","log","idx","Math","random"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;;AAIA,QAAMgB,gBAAgB,GAAG,MAAM;AAC3BP,IAAAA,SAAS,CAACD,MAAM,GAAG,EAAV,CAAT;AAEAS,IAAAA,KAAK,CAAE,uCAAsCP,KAAM,WAAUF,MAAO,EAA/D,CAAL,CACKU,IADL,CACWC,GAAD,IAAS;AACX,UAAIA,GAAG,CAACL,MAAJ,KAAe,GAAnB,EAAwB;AACpBC,QAAAA,SAAS,CAAC,SAAD,CAAT;AAEAI,QAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBG,MAAD,IAAY;AACxB,gBAAMC,IAAI,GAAGD,MAAM,CAACE,GAAP,CAAYC,IAAD,IAAU;AAC9B,mBAAOA,IAAI,CAACC,KAAZ;AACH,WAFY,CAAb,CADwB,CAIxB;;AACApB,UAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGkB,IAAb,CAAD,CAAP;AACH,SAND;AAQH,OAXD,MAWO;AACHP,QAAAA,SAAS,CAAC,QAAD,CAAT;AACAI,QAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBG,MAAD,IAAY;AACxBR,UAAAA,UAAU,CAACQ,MAAM,CAACT,OAAR,CAAV;AACH,SAFD;AAGH;AACJ,KAnBL;AAsBH,GAzBD;;AA2BJc,EAAAA,MAAM,CAACC,QAAP,GAAkB,YAAU;AACxB,QAAIC,eAAe,GAAGC,QAAQ,CAACC,IAAT,CAAcC,YAApC;AACA,QAAIC,WAAW,GAAGN,MAAM,CAACO,OAAP,GAAiBP,MAAM,CAACQ,WAA1C;;AACA,QAAGF,WAAW,KAAKJ,eAAnB,EACA;AACIO,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACApB,MAAAA,gBAAgB;AACnB;AACJ,GARD,CArC8B,CAkD1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAkC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAnB,IAAAA,KAAK,CAAE,uCAAsCP,KAAM,WAAUF,MAAO,EAA/D,CAAL,CACKU,IADL,CACWC,GAAD,IAAS;AACX,UAAIA,GAAG,CAACL,MAAJ,KAAe,GAAnB,EAAwB;AACpBC,QAAAA,SAAS,CAAC,SAAD,CAAT;AACAoB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAjB,QAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBG,MAAD,IAAY;AACxB,gBAAMC,IAAI,GAAGD,MAAM,CAACE,GAAP,CAAYC,IAAD,IAAU;AAC9B,mBAAOA,IAAI,CAACC,KAAZ;AACH,WAFY,CAAb;AAGAU,UAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACAjB,UAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGkB,IAAb,CAAD,CAAP;AACH,SAND;AAQH,OAXD,MAWO;AACHP,QAAAA,SAAS,CAAC,QAAD,CAAT;AACAI,QAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBG,MAAD,IAAY;AACxBR,UAAAA,UAAU,CAACQ,MAAM,CAACT,OAAR,CAAV;AACH,SAFD;AAGH;AACJ,KAnBL;AAqBH,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAA,6BAKI;AAAA,kBAEQR,IAAI,CAACmB,GAAL,CAAS,CAACC,IAAD,EAAOa,GAAP,KAAe;AACpB,8BACI;AAAA,mCAEI;AAAA,sCACI;AAAA,0BAAyBA,GAAG,GAAG;AAA/B,iBAASC,IAAI,CAACC,MAAL,EAAT;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA,0BAAyBf;AAAzB,iBAASc,IAAI,CAACC,MAAL,EAAT;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA,eAAmBF,GAAnB;AAAA;AAAA;AAAA;AAAA;AAFJ,2BADJ;AAUH,SAXD;AAFR;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,YAHJ,EA4BKvB,MAAM,KAAK,QAAX,gBACG;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,YADH,gBAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA9BV;AAAA,kBADJ;AAoCH,CAzHD;;GAAMV,U;;KAAAA,U;AA2HN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Renderlist = (props) => {\n    const [list, setList] = useState([]);\n    const [listf, setListf] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [limit, setLimit] = useState(10);\n    const [message, setMessage] = useState(\"\");\n    const [status, setStatus] = useState('');\n    \n   \n\n    const getNextSetOfData = () => {\n        setOffset(offset + 10);\n        \n        fetch(`http://localhost:3005/getfake?limit=${limit}&offset=${offset}`)\n            .then((res) => {\n                if (res.status === 200) {\n                    setStatus('success')\n\n                    res.json().then((result) => {\n                        const arrf = result.map((item) => {\n                            return item.title;\n                        })\n                        //console.log(arrf);\n                        setList([...list, ...arrf]);\n                    })\n\n                } else {\n                    setStatus('failed')\n                    res.json().then((result) => {\n                        setMessage(result.message)\n                    })\n                }\n            })\n\n\n    }\n\nwindow.onscroll = function(){\n    var totalPageHeight = document.body.scrollHeight; \n    var scrollPoint = window.scrollY + window.innerHeight;\n    if(scrollPoint === totalPageHeight)\n    {\n        console.log(\"at the bottom\");\n        getNextSetOfData();\n    }\n}\n\n\n\n\n    // window.onscroll = function () {\n    //     // console.log( window.innerHeight , window.scrollY, document.body.offsetHeight)\n    //     // if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n    //   //  if ((document.body.offsetHeight - window.innerHeight) <= window.scrollY) {\n    //     if ((window.innerHeight + document.documentElement.scrollTop) >= document.body.offsetHeight) {\n    //         getNextSetOfData();\n    //     }\n    // };\n\n    useEffect(() => {\n        // getNextSetOfData();\n        console.log('hello');\n        fetch(`http://localhost:3005/getfake?limit=${limit}&offset=${offset}`)\n            .then((res) => {\n                if (res.status === 200) {\n                    setStatus('success')\n                    console.log('hello');\n                    res.json().then((result) => {\n                        const arrf = result.map((item) => {\n                            return item.title;\n                        })\n                        console.log(arrf);\n                        setList([...list, ...arrf]);\n                    })\n\n                } else {\n                    setStatus('failed')\n                    res.json().then((result) => {\n                        setMessage(result.message)\n                    })\n                }\n            })\n\n    }, [])\n\n    return (\n        <>\n            <hi>RenderList</hi>\n\n            <table >\n\n\n\n\n                <tbody>\n                    {\n                        list.map((item, idx) => {\n                            return (\n                                <>\n\n                                    <tr key={idx} key={idx}>\n                                        <td key={Math.random()}>{idx + 1}</td>\n                                        <td key={Math.random()}>{item}</td>\n                                    </tr>\n\n                                </>\n                            )\n                        })\n                    }\n                </tbody>\n\n\n            </table>\n\n            {status === 'failed' ?\n                <h1>{message}</h1>\n                : <p>loading...</p>\n            }\n\n        </>\n    )\n}\n\nexport default Renderlist;"]},"metadata":{},"sourceType":"module"}